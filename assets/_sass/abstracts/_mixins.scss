// Rem output with px fallback
@mixin font-size($size) {
  font-size: $size; //Fallback in px
  font-size: calculate-rem($size);
}

// Center block
@mixin center-block {
  display: block;
  margin-right: auto;
  margin-left: auto;
}

// Clearfix
@mixin clearfix() {
  content: '';
  display: table;
  table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
  clear: both;
}

// Breakpoints
// Breakpoints
// $break: Breakpoint to use
// $dir: 'min-width' or 'max-width'
// $until: Maximum width
// @include breakpoint('medium');
// @include breakpoint($break: 'medium', $until: 'large');
// @include breakpoint($break: 'medium', $dir: 'max-width');
@mixin breakpoint($break, $dir: 'min-width', $until: null) {
  @if not map-has-key($breakpoints, $break) {
    $break: $break;
  } @else {
    $break: map-get($breakpoints, $break);
  }

  @if $break and $until {
    @if not map-has-key($breakpoints, $until) {
      $until: $until;
    } @else {
      $until: map-get($breakpoints, $until);
    }

    @media screen and (min-width: $break) and (max-width: $until) {
      @content;
    }
  } @else {
    @media screen and ($dir: $break) {
      @content;
    }
  }
}

// Box Shadow
/* @include box-shadow(1px,1px,1px,0, #fff, true); */

@mixin box-shadow($top, $left, $blur, $size, $color, $inset: false) {
  @if $inset {
    box-shadow: inset $top $left $blur $size $color;
  }
  @else {
    box-shadow: $top $left $blur $size $color;
  }
}

// Extend Background to full width of window
@mixin full-width-background ( $background ) {
  &::before,
  &::after {
    content: '';
    position: absolute;
    top: 0;
    display: block;
    width: 100vw;
    height: 100%;
    background-color: $background;
  }

  &::before {
    right: calc(100% - 1px);
  }

  &::after {
    left: calc(100% - 1px);
  }
}

// Returns a property: value pair for each breakpoint
/* @include structure($size__container-max-width, 'max-width'); */
@mixin structure($map, $property) {
  @each $size in $sizes__default {
    $value: return-map-value($map, $size);
    @if $size == 'small' {
      @include structure-property($property, $value);
    } @else {
      @include breakpoint($size) {
        @include structure-property($property, $value);
      }
    }
  }
}

// Used exclusively by the structure mixin to return property-left/property-right/property depending on the type of property.
@mixin structure-property($property, $value) {
  @if $property == 'padding' or $property == 'margin' {
    $right: nth($value, 1);
    $left: nth($value, 1);
    @if length($value) == 2 {
      $left: nth($value, 2);
    }
    #{$property}-right: $right;
    #{$property}-left: $left;
  } @else {
    #{$property}: $value;
  }
}
